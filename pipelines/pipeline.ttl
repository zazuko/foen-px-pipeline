@base <urn:pipeline:cube-ld> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.

_:common-vars :variable
  [ a :Variable; :name "targetDir"; :value "target" ] ,
  [ a :Variable; :name "sourceFile"; :value "source/pxfiles.json" ] ,
  [ a :Variable; :name "encoding"; :value "iso-8859-15" ] .
  
# ------------------------------
#
# Root pipeline
#
# Entire workflow: download, extract and process files
#
# ------------------------------

<#Root> a :Pipeline;
  :steps [
        :stepList ( <#readFile> <#parseJson> <#transformChunk>  <#doTransform> <#sparqlInsert> <#inNamedNodeToList> <#scaleOfMeasure> <#flatten> <#serialize> <#write> )
#        :stepList ( <#readFile> <#parseJson> <#transformChunk>  <#doTransform> <#serialize> <#write> )

    ] ;
:variables _:common-vars .

<#readFile> a :Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("sourceFile"^^:VariableName).
  
<#parseJson> a :Step;
  code:implementedBy [
    code:link <node:barnard59-base#json.parse>;
    a code:EcmaScript
  ].
  
<#transformChunk> a :Step ;
  code:implementedBy
    [
      code:link <file:../lib/chunk.js> ;
      a code:EcmaScript
    ] .
  
<#doTransform> a :Step ;
  code:implementedBy [
      code:link <node:barnard59-core#forEach> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    <#TransformPX>
  """(p, item) => {
  p.variables.set('px', item.fileurl)
  p.variables.set('baseIRI', item.baseIRI)
  p.variables.set('columns', item.columns)
}"""^^code:EcmaScript
  ) . 
  
# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformPX> a :Pipeline, :ReadableObjectMode ;
  :steps
    [
      :stepList ( <#fetch> <#parse> <#replaceDotsWithNan> )
    ] ;
  :variables _:common-vars.

<#fetch> a :Step;
  code:implementedBy [
    code:link <node:barnard59-http#fetch> ;
  a code:EcmaScript
  ];
  code:arguments [
    code:name "url";
    code:value "px"^^:VariableName
  ] .

<#parse> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-px#parse>
  ];
  code:arguments [
    code:name "baseIRI";
    code:value "baseIRI"^^:VariableName
  ], [
    code:name "columns";
    code:value "columns"^^:VariableName
  ], [
    code:name "encoding";
    code:value "encoding"^^:VariableName
  ].
  
<#fixIntegerToDouble> a :Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ( """quad => {
      const rdf = require('rdf-ext')
    if(typeof quad.object.datatype !== "undefined"){
    if(quad.object.datatype.value == "http://www.w3.org/2001/XMLSchema#integer"){
      if(quad.object.value.includes(".")){
        return rdf.quad(quad.subject, quad.predicate, rdf.literal(quad.object.value, rdf.namedNode('http://www.w3.org/2001/XMLSchema#double')));
      }
    }
    }
      return quad
    }"""^^code:EcmaScript) .
  
<#replaceDotsWithNan> a :Step ;
  code:implementedBy [
    code:link <node:barnard59-base#map> ;
    a code:EcmaScript
  ];
  code:arguments ( """quad => {
      const rdf = require('rdf-ext')
    if(quad.object.value == '......'){
    return rdf.quad(quad.subject, quad.predicate, rdf.literal("NaN", rdf.namedNode('http://www.w3.org/2001/XMLSchema#double')));
    }
    if(quad.object.value == '...'){
    return rdf.quad(quad.subject, quad.predicate, rdf.literal("NaN", rdf.namedNode('http://www.w3.org/2001/XMLSchema#double')));
    }
      return quad
    }"""^^code:EcmaScript) .

<#sparqlInsert> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-tdb#update>
  ];
  code:arguments [
    code:name "queries";
    code:value (
      "require('fs').readFileSync('sparql/rdf-data-cube-meta.rq').toString()"^^code:EcmaScript
      "require('fs').readFileSync('sparql/cube-from-datacube.rq').toString()"^^code:EcmaScript
      "require('fs').readFileSync('sparql/cube-shape-iri.rq').toString()"^^code:EcmaScript
      "require('fs').readFileSync('sparql/cube-shape-literal.rq').toString()"^^code:EcmaScript
    )
  ].
  
<#inLiteralToList> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../lib/toList#literal>
  ];
  code:arguments [
    code:name "property";
    code:value <http://www.w3.org/ns/shacl#inLiteral>
  ], [
    code:name "targetProperty";
    code:value <http://www.w3.org/ns/shacl#in>
  ], [
    code:name "datatype";
    code:value xsd:boolean
  ].

<#inNamedNodeToList> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../lib/toList#namedNode>
  ];
  code:arguments [
    code:name "property";
    code:value <http://example.org/in>
  ], [
    code:name "targetProperty";
    code:value <http://www.w3.org/ns/shacl#in>
  ].

<#scaleOfMeasure> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <file:../lib/scaleOfMeasure.js>
  ].

<#flatten> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#flatten>
  ].

<#serialize> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<#write> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("${targetDir}/everything.nt"^^code:EcmaScriptTemplateLiteral) .
#  code:arguments ("target/${px.replace('https://www.pxweb.bfs.admin.ch/DownloadFile.aspx?file=', '')}.out.nt"^^code:EcmaScriptTemplateLiteral ) .