@base <urn:pipeline:bafu-ld> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

_:common-vars :variable
  [ a :Variable; :name "targetDir"; :value "target" ] ,
  [ a :Variable; :name "sourceFile"; :value "source/pxfiles.json" ] ,
  [ a :Variable; :name "baseIRI"; :value "http://px.zazuko.com/bafu/" ] ,
  [ a :Variable; :name "columns"; :value """[{
        "titles": "Jahr",
        "datatype": "http://www.w3.org/2001/XMLSchema#gYear"
      }]""" ] ,
  [ a :Variable; :name "encoding"; :value "iso-8859-15" ] .
  
# ------------------------------
#
# Root pipeline
#
# Entire workflow: download, extract and process files
#
# ------------------------------

<#Root> a :Pipeline, :Readable ;
  :steps [
        :stepList ( <#readFile> <#parseJson> <#transformChunk>  <#doTransform> )
    ] ;
:variables _:common-vars .

<#readFile> a :Step;
  code:implementedBy [
    code:link <node:fs#createReadStream>;
    a code:EcmaScript
  ];
  code:arguments ("sourceFile"^^:VariableName).
  
<#parseJson> a :Step;
  code:implementedBy [
    code:link <node:barnard59-base#json.parse>;
    a code:EcmaScript
  ].
  
<#transformChunk> a :Step ;
  code:implementedBy
    [
      code:link <file:../lib/chunk.js> ;
      a code:EcmaScript
    ] .
	
<#doTransform> a :Step ;
  code:implementedBy [
      code:link <node:barnard59-core#forEach> ;
      a code:EcmaScript
    ] ;
  code:arguments (
    <#TransformPX>
	"(p, fileUrl) => { p.variables.set('px', fileUrl) }"^^code:EcmaScript
  ) .	
  
# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformPX> a :Pipeline, :Readable ;
  :steps
    [
      :stepList ( <#fetch> <#parse> <#serialize> <#write> )
    ] ;
  :variables _:common-vars.

<#fetch> a :Step;
  code:implementedBy [
    code:link <node:barnard59-http#fetch> ;
	a code:EcmaScript
  ];
  code:arguments [
		code:name "url";
		code:value "px"^^:VariableName
	] .

<#parse> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-px#parse>
  ];
  code:arguments [
    code:name "baseIRI";
    code:value "baseIRI"^^:VariableName
  ], [
    code:name "columns";
    code:value "JSON.parse(this.variables.get('columns'))"^^code:EcmaScript
  ], [
    code:name "encoding";
    code:value "encoding"^^:VariableName
  ].

<#serialize> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<#write> a :Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createWriteStream>
  ];
  code:arguments ("target/px.out.nt").
